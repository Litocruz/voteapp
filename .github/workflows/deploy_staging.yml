
name: Auto-Deploy a Staging

on:
  workflow_run:
    workflows: ["CI roxs-voting-app"]
    types:
      - completed
    branches: [main]
  workflow_dispatch: # Para despliegue manual

jobs:
  deploy:
    runs-on: self-hosted # Utiliza el runner autohospedado para acceder al servidor
    if: ${{ github.event.workflow_run.conclusion == 'success' }} # Solo se ejecuta si el CI fue exitoso

    steps:
      - name: Checkout del codigo
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" > .env
          echo "DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}" >> .env
          echo "APP_PORT=${{ secrets.APP_PORT }}" >> .env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
          echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> .env
          echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Construir y subir imagenes de Docker
        run: |
          docker compose -f docker-compose.staging.yml build
          docker compose -f docker-compose.staging.yml push

      - name: List scripts directory
        run: ls -l scripts

      - name: Ejecutar deployment script
        run: ./scripts/deploy.sh staging # Pasa el entorno como argumento

      - name: Health Check y Smoke Tests
        run: ./scripts/health-check.sh staging
        # Puedes a√±adir otros comandos para verificar funcionalidad clave