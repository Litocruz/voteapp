# .github/workflows/deploy-production.yml

name: Deploy a Produccion

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version del release (ej. v1.2.3)'
        required: true

jobs:
  deploy-to-prod:
    runs-on: self-hosted
    environment: # Requiere aprobación manual
      name: production
      url: http://localhost:8080

    steps:
      - name: Checkout del codigo
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" > .env
          echo "DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}" >> .env
          echo "APP_PORT=${{ secrets.APP_PORT }}" >> .env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
          echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> .env
          echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env

      - name: Hacer backup de la base de datos
        run: ./scripts/backup.sh

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Construir y subir imagenes de Docker
        run: |
          docker compose -f docker-compose.production.yml build
          docker compose -f docker-compose.production.yml push

      - name: Ejecutar deployment script
        run: ./scripts/deploy.sh production

      - name: Health Check y Smoke Tests
        run: ./scripts/health-check.sh production

      - name: Notificar deployment exitoso
        run: |
          # Comando para enviar una notificacion a Slack, email, etc.
          echo "Deployment de version ${{ github.event.inputs.version }} a produccion exitoso."
          # URL de la API de Telegram para enviar mensajes
          TELEGRAM_API_URL="https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"
          
          # Mensaje a enviar. Se usa la variable del workflow para la versión.
          MESSAGE="✅ Despliegue de la version ${{ github.event.inputs.version }} a producción exitoso."

          # Hacer la petición POST usando curl
          # -s: modo silencioso, -X POST: tipo de petición, -d: datos a enviar
          curl -s -X POST "$TELEGRAM_API_URL" -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" -d text="$MESSAGE"